#!/usr/bin/env python

import argparse
from collections import defaultdict
from collections import OrderedDict
import cProfile
import json
import os
from pathlib import Path
import pickle
import random
import time

from PIL import Image
import cv2
import matplotlib.pyplot as plt
import numpy as np
import pycocotools
import torch
from torch.autograd import Variable
import torch.backends.cudnn as cudnn

# Add local Yolact to the search path.
sys.path.append(os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'src'))

from yolact.data import COCODetection, get_label_map, MEANS, COLORS
from yolact.data import cfg, set_cfg, set_dataset
from yolact.layers.box_utils import jaccard, center_size, mask_iou
from yolact.layers.output_utils import postprocess, undo_image_transformation
from yolact.utils import timer
from yolact.utils.augmentations import BaseTransform, FastBaseTransform, Resize
from yolact.utils.functions import MovingAverage, ProgressBar
from yolact.utils.functions import SavePath
from yolact.yolact import Yolact

from yolact.utils.evaluation import *


if __name__ == '__main__':
    parse_args()

    if args.config is not None:
        set_cfg(args.config)

    if args.trained_model == 'interrupt':
        args.trained_model = SavePath.get_interrupt('weights/')
    elif args.trained_model == 'latest':
        args.trained_model = SavePath.get_latest('weights/', cfg.name)

    if args.config is None:
        model_path = SavePath.from_str(args.trained_model)
        # TODO: Bad practice? Probably want to do a name lookup instead.
        args.config = model_path.model_name + '_config'
        print('Config not specified. Parsed %s from the file name.\n' % args.config)
        set_cfg(args.config)

    if args.detect:
        cfg.eval_mask_branch = False

    if args.dataset is not None:
        set_dataset(args.dataset)

    with torch.no_grad():
        if not os.path.exists('results'):
            os.makedirs('results')

        if args.cuda:
            cudnn.fastest = True
            torch.set_default_tensor_type('torch.cuda.FloatTensor')
        else:
            torch.set_default_tensor_type('torch.FloatTensor')

        if args.resume and not args.display:
            with open(args.ap_data_file, 'rb') as f:
                ap_data = pickle.load(f)
            calc_map(ap_data)
            exit()

        if args.image is None and args.video is None and args.images is None:
            dataset = COCODetection(cfg.dataset.valid_images, cfg.dataset.valid_info,
                                    transform=BaseTransform(), has_gt=cfg.dataset.has_gt)
            prep_coco_cats()
        else:
            dataset = None

        print('Loading model...', end='')
        net = Yolact()
        net.load_weights(args.trained_model)
        net.eval()
        print(' Done.')

        if args.cuda:
            net = net.cuda()

        evaluate(net, dataset)
